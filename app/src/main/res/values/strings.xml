<resources>
    <string name="app_name">MaterialYou</string>
    <string name="photo_of_the_day_stub">Photo of the day</string>
    <string name="search_wiki">Search in wiki</string>
    <string name="wiki_helper_text">Try to find answer in wiki</string>
    <string name="favourite">favourite</string>
    <string name="settings">settings</string>
    <string name="search">Search</string>
    <string name="today">Today</string>
    <string name="yesterday">Yesterday</string>
    <string name="before_yesterday">Before yesterday</string>
    <string name="myDefault">Default</string>
    <string name="entry">Entry</string>
    <string name="choice">Choice</string>
    <string name="action">Action</string>
    <string name="filter">Filter</string>
    <string name="background_color">Background Color</string>
    <string name="ripple_color">Ripple Color</string>
    <string name="chip_icon">Chip icon</string>
    <string name="chip">Chip</string>
    <string name="group">Group</string>
    <string name="one">One</string>
    <string name="two">Two</string>
    <string name="choose_one">Choose One</string>
    <string name="choice_a">Choice A</string>
    <string name="choice_b">Choice B</string>
    <string name="choice_c">Choice C</string>
    <string name="in">in</string>
    <string name="single">single</string>
    <string name="line">line</string>
    <string name="add">add</string>
    <string name="a">a</string>
    <string name="horizontal">horizontal</string>
    <string name="scroll">scroll</string>
    <string name="close_icon_listener">Close Icon Listener</string>
    <string name="raised_button">Raised Button</string>
    <string name="unelevated_button">Unelevated Button</string>
    <string name="outlined_button">Outlined Button</string>
    <string name="text_button">Text Button</string>
    <string name="radio_button">Radio Button</string>
    <string name="mySwitch">Switch</string>
    <string name="filled_box_text_field">Filled Box Text Field</string>
    <string name="text">Text</string>
    <string name="outlined_box_text_field">Outlined Box Text Field</string>
    <string name="card">Card</string>
    <string name="checkbox">Checkbox</string>
    <string name="mars_theme">Mars theme</string>
    <string name="titan_theme">Titan theme</string>
    <string name="default_theme">Earth theme</string>

    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="back">Back</string>
    <string name="system">System</string>
    <string name="earth">Earth</string>
    <string name="mars">Mars</string>

    <string name="large_text" translatable="false">
     Теперь, когда name принадлежит Player, надо обновить printPlayerStatus, чтобы получить имя из экземпляра класса Player. Используйте синтаксис с точкой, чтобы передать свойство name переменной player в printPlayerStatus.
Листинг 12.7. Получение ссылки на свойство name класса Player name (Game.kt)
...
// Состояние игрока
printPlayerStatus(auraColor, isBlessed, player.name, healthStatus)
}
...
Запустите Game.kt. Состояние игрока, включая имя, выводится в таком же виде, как и раньше, но теперь вы получили доступ к свойству name через экземпляр класса Player, а не через локальную переменную в main.
Когда создается экземпляр класса, все его свойства должны получить значения. Это значит, что, в отличие от переменных, свойствам класса обязательно должны присваиваться начальные значения. Например, следующий код недопустим, так как name объявляется без начального значения:
class Player {
var name: String
}
Мы изучим подробности инициализации классов и свойств в главе 13.
Позже в этой главе вы займетесь рефакторингом NyetHack и переместите остальные данные, принадлежащие классу Player, в объявление этого класса.
222 Глава 12. Объявление классов
Методы свойств
Свойства моделируют характеристики каждого экземпляра класса. Они также позволяют другим объектам взаимодействовать с данными в классе с использованием простого и компактного синтаксиса. Подобное взаимодействие обеспечивается с помощью методов свойств.
Для каждого объявленного свойства Kotlin сгенерирует поле, метод чтения (геттер) и, если надо, метод записи (сеттер). Поле — это то место, где хранятся данные для свойства. Прямо объявить поле в классе нельзя. Kotlin инкапсулирует поля, защищая данные в поле и открывая доступ к ним через методы свойств. Метод чтения свойства определяет правила его чтения. Методы чтения создаются для всех свойств. Метод записи определяет правила присваивания значения свойству, поэтому он генерируется только для изменяемых свойств, — другими словами, если свойство объявлено с ключевым словом var.
Представьте, что вы пришли в ресторан и в меню, помимо прочего, есть спагетти. Вы заказываете их, и официант приносит спагетти с сыром и соусом. Вам не нужен доступ на кухню, официант решает все вопросы сам, в том числе добавлять ли сыр и соус в заказанные спагетти. Вы — это вызывающий код, а официант — метод чтения.
Вы посетитель ресторана и не хотите кипятить воду для спагетти. Вы хотите сделать заказ и получить его. А ресторану не нужно, чтобы вы слонялись по кухне, где перекладывали бы ингредиенты и посуду, как вам заблагорассудится. Именно так работает инкапсуляция.
Несмотря на то что методы свойств генерируются языком Kotlin по умолчанию, вы можете объявить свои методы, если хотите конкретизировать, как должны осуществляться чтение и запись данных. Это называется переопределением методов свойств.
Чтобы увидеть, как переопределить метод чтения, добавьте метод get() в определение свойства name, который будет следить за тем, чтобы при обращении к этому свойству возвращалась строка, начинающаяся с прописной буквы.

    </string>
    <string name="first">first</string>
    <string name="second">second</string>
    <string name="android_on_earth">Android on earth</string>
</resources>